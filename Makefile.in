#---------------------------------------
# GSL recommends the following flags
# removed flags: -ansi -Wmissing-prototypes -Wstrict-prototypes -Wconversion -Wnested-externs -Dinline=
# GSLRECFLAGS=-Wall -pedantic -Werror -W -Wno-unknown-pragmas\
# -Wshadow -Wpointer-arith \
# -Wcast-qual -Wcast-align -Wwrite-strings \
# -fshort-enums -fno-common
				
#---------------------------------------
# WARNING: You (probably) should not change anything below
DIRS=$(addprefix $(srcdir)/, core io mathtools tests)
DEPDIR=$(addprefix $(srcdir)/, dep)
$(shell mkdir -p $(DEPDIR))
VPATH=$(srcdir):$(DIRS)

SOURCES=fiducial_cosmology.cpp global_numbers.cpp matrix_helper.cpp one_qso_estimate.cpp \
quadratic_estimate.cpp sq_table.cpp discrete_interpolation.cpp fourier_integrator.cpp \
interpolation.cpp interpolation_2d.cpp config_file.cpp io_helper_functions.cpp qso_file.cpp \
sq_lookup_table_file.cpp logger.cpp real_field.cpp smoother.cpp bootstrap_file.cpp
CUDA_SOURCES=cuda_helper.cu chunk_estimate.cu

CUDA_OBJECTS=$(CUDA_SOURCES:.cu=.o)
OBJECTS=$(SOURCES:.cpp=.o) $(CUDA_OBJECTS)
bin_OBJ=LyaPowerEstimate.o CreateSQLookUpTable.o cblas_tests.o testPointRef.o testSQCMatrices.o \
test-fftconvolve.o myfitsread.o
global_objs=global_numbers.o config_file.o logger.o io_helper_functions.o
sq_table_objs=sq_table.o sq_lookup_table_file.o fiducial_cosmology.o fourier_integrator.o \
discrete_interpolation.o interpolation.o interpolation_2d.o
test_objects=test_cuda_helper.o test_utils.o testPointRef.o myfitsread.o \
test-fftconvolve.o
DEPS=$(addprefix $(DEPDIR)/, $(OBJECTS:.o=.d) $(bin_OBJ:.o=.d))

# -DHAVE_INLINE for inline declarations in GSL for faster performance
CPPFLAGS+=-I$(srcdir) -std=c++17 -DHAVE_INLINE $(MORECPPFLAGS)
# CPPFLAGS+=-MT $@ -MMD -MP -MF $(DEPDIR)/$*.d DOESnot compile with nvc++
CXXFLAGS=$(OPT) $(GSLRECFLAGS)

core: LyaPowerEstimate CreateSQLookUpTable

$(CUDA_OBJECTS) test_cuda_helper.o: %.o: %.cu
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $<

LyaPowerEstimate: LyaPowerEstimate.o $(OBJECTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS) $(LDLIBS)

CreateSQLookUpTable: CreateSQLookUpTable.o $(global_objs) $(sq_table_objs)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS) $(LDLIBS)

test_utils.o: test_utils.hpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -DSRCDIR="$(srcdir)" -c $<

cblas_tests: cblas_tests.o matrix_helper.o real_field.o test_utils.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -DSRCDIR="$(srcdir)" $^ -o $@ $(LDFLAGS) $(LDLIBS)

test_cuda_helper: test_cuda_helper.o cuda_helper.o logger.o io_helper_functions.o matrix_helper.o real_field.o test_utils.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -DSRCDIR="$(srcdir)" $^ -o $@ $(LDFLAGS) $(LDLIBS)

testSQCMatrices: testSQCMatrices.o test_utils.o $(OBJECTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -DSRCDIR="$(srcdir)" $^ -o $@ $(LDFLAGS) $(LDLIBS)

testPointRef: testPointRef.o
myfitsread: myfitsread.o
test-fftconvolve: test-fftconvolve.o $(OBJECTS)

test: core cblas_tests testSQCMatrices test_cuda_helper
	mkdir -p $(srcdir)/tests/output
	
	@echo "Testing CBLAS functions...."
	@${exec}cblas_tests

	@echo "Testing cuda_helper functions...."
	@${exec}test_cuda_helper

	@echo "Testing S & Q lookup tables and interpolation..."
	@${exec}testSQCMatrices $(srcdir)/tests/input/test.config

	@echo "Running QMLE..."
	@${exec}LyaPowerEstimate $(srcdir)/tests/input/test.config > $(srcdir)/tests/output/LyaPowerEstimate.log

	@python3 tests/compareTestResults.py $(srcdir)

.PHONY: install uninstall clean

install: LyaPowerEstimate CreateSQLookUpTable
	mkdir -p $(bindir)
	cp LyaPowerEstimate CreateSQLookUpTable $(srcdir)/py/lorentzian_fit.py $(srcdir)/py/smbivspline.py $(bindir)
	chmod a+x $(bindir)/lorentzian_fit.py $(bindir)/smbivspline.py

uninstall:
	$(RM) $(bindir)/lorentzian_fit.py
	$(RM) $(bindir)/LyaPowerEstimate $(bindir)/CreateSQLookUpTable

clean:
	$(RM) $(OBJECTS) $(bin_OBJ) $(test_objects)
	$(RM) LyaPowerEstimate CreateSQLookUpTable cblas_tests testSQCMatrices
	$(RM) test_cuda_helper testPointRef myfitsread test-fftconvolve

deepclean: clean
	$(RM) $(DEPS)

-include $(DEPS)
