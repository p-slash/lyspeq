#!/bin/bash

# ./configure x64-linux-gnu-mklxe18 will set up a version that that compiles with gcc and uses MKL.
# Change configuration by passing build types. For more info ./configure --print-builds
# To enable OpenMP threading, pass --enable-openmp
# For more options pass --help or -h
# Intel compilers: This has been tested for only Parallel Studio XE 2018 icpc and MKL.

function save_makefile() {
    echo "# Generated automatically by configure."
    echo "CXX=${CXX}" > Makefile
    echo "CPPFLAGS=${CPPFLAGS}" >> Makefile
    echo "LDFLAGS=${LDFLAGS}" >> Makefile
    echo "LDLIBS=${LDLIBS}" >> Makefile
    echo "MORECPPFLAGS=${MORECPPFLAGS}" >> Makefile
    echo "OPT=${OPT}" >> Makefile
    echo "bindir=${bindir}" >> Makefile
    echo "srcdir=${srcdir}" >> Makefile
    echo "exec=${exec}" >> Makefile
    cat ${srcdir}/Makefile.in >> Makefile
    echo "Makefile set. Run make to compile."
}

function user_overwrite_defined_variables()
{
    if [[ ! -z "${CXXu}" ]]; then
        CXX="${CXXu}"
    fi
}

function print_build_types() {
    echo "Available build types are :"
    echo "-------------------------"
    echo "* nersc-mkl"
    echo "# MPI by default. MKL for cblas
# Linux, Cray compiler-Haswell
# Explicit FFTW and CFITSIO linking"
    echo "-------------------------"
    echo "* nersc"
    echo "# MPI by default. LibSci for cblas
# Linux, Cray compiler-Haswell
# 32-bit integers interface
# Explicit FFTW and CFITSIO linking"
    echo "-------------------------"
    echo "* GNU_XE18MKL or x64-linux-gnu-mklxe18"
    echo "# Parallel Studio XE 2018, MKL for cblas
# Linux, GNU compiler, Intel(R) 64 arch
# 32-bit integers interface, 64-bit interface has runtime errors on Grace
# Dynamic linking, explicit MKL lib linking
# No problems with GCC 7.3.0"
    echo "-------------------------"
    echo "* XE18_icpcMKL or x64-linux-icpc-mklxe18"
    echo "# Parallel Studio XE 2018
# Linux, Intel compiler, Intel(R) 64 arch
# Uses 32-bit integers interface even though 64-bit integers interface works
# Dynamic linking, no explicit MKL lib linking
# Static linking fails for unknown reasons"
    echo "-------------------------"
    echo "* clang_openblas or x64-macos-clang-openblas uses clang++"
    echo "* x64-macos-gcc9-openblas uses g++-9"
    echo "# To install OpenMP in Mac: brew install libomp
# To install OpenBLAS:      brew install openblas
# openblas is keg-only, which means it was not symlinked into /usr/local,
# because macOS provides BLAS and LAPACK in the Accelerate framework.
# It is in /usr/local/opt/openblas/lib"
    echo "-------------------------"
    echo "* x64-ubuntu-gcc-atlas"
    echo "* x64-ubuntu-gcc-openblas"
    echo "# Compile with g++ and uses ATLAS and OpenBLAS respectively with -llapacke"
}

function set_omp_flags() {
    if [[ "${CPPFLAGS_OMP}" = "-fopenmp" ]]; then
        case ${CXX} in
            g++* )
                CPPFLAGS_OMP="-fopenmp"
                LDLIBS_OMP="-lgomp"
                MKL_THREAD_LIBS="-lmkl_gnu_thread -lmkl_core"
                ;;
            clang++ )
                CPPFLAGS_OMP="-Xpreprocessor -fopenmp"
                LDLIBS_OMP="-lomp"
                ;;
            icpc )
                CPPFLAGS_OMP="-qopenmp"
                LDLIBS_OMP="-liomp5"
                MKL_THREAD_LIBS="-lmkl_intel_thread -lmkl_core"
                ;;
        esac
    elif [[ "${CPPFLAGS_OMP}" = "-tbb" ]]; then
        CPPFLAGS_OMP=
        LDLIBS_OMP="-ltbb -lstdc++"
        MKL_THREAD_LIBS="-lmkl_tbb_thread -lmkl_core"
    else
        CPPFLAGS_OMP=""
        LDLIBS_OMP=""
        MKL_THREAD_LIBS="-lmkl_sequential -lmkl_core"
    fi
}

function set_gsl_inc_lib() {
    if [[ -z "${GSL_DIR}" ]]; then
        gsl_inc=""
        gsl_lib=""
    else
        gsl_inc="-I${GSL_DIR}/include"
        gsl_lib="-L${GSL_DIR}/lib"
        return
    fi

    if [[ $(type gsl-config) > /dev/null ]]; then
        GSL_VERSION=$(gsl-config --version)
        GSL_DIR=$(gsl-config --prefix)
        echo "GSL is in the following directory: ${GSL_DIR}"
        echo "Using GSL version ${GSL_VERSION}"
        gsl_inc="-I${GSL_DIR}/include"
        gsl_lib="-L${GSL_DIR}/lib"
    fi
}

# Default values
OPT=-O3
en_mpi=
binz_fn=-DTRIANGLE_Z_BINNING_FN
fisher_opt=
z_growth=
debug=
exec=./

SYSTYPE=""
prefix="/usr/local"
exec_prefix="${prefix}"
bindir="${exec_prefix}/bin"
srcdir="."
set_gsl_inc_lib

CONFIGURE_ARGS="$*"
for i in "$@"
do
    case $i in
        --prefix=* | --exec_prefix=*)
            exec_prefix="${i#*=}"
            bindir="${exec_prefix}/bin";;
        --bindir=*)
            bindir="${i#*=}";;
        --srcdir=*)
            srcdir="${i#*=}";;
        --enable-fisher-optimization )
            fisher_opt="-DFISHER_OPTIMIZATION";;
        --enable-fiducial-growth )
            z_growth="-DREDSHIFT_GROWTH_POWER";;
        --enable-mpi )
            CXXu="mpic++"
            en_mpi="-DENABLE_MPI";;
        --enable-openmp )
            CPPFLAGS_OMP="-fopenmp";;
        --enable-tbb )
            CPPFLAGS_OMP="-tbb";;
        --binz_fn=* )
            if [[ "${i#*=}" ==  "TRIANGLE_Z_BINNING_FN" || "${i#*=}" ==  "TOPHAT_Z_BINNING_FN" ]]; then
                binz_fn="-D${i#*=}"
            else
                echo "Wrong binning function variable. Using triangle binning in z by default."
                echo "Pass TRIANGLE_Z_BINNING_FN or TOPHAT_Z_BINNING_FN"
            fi;;
        --interactive )
            SYSTYPE="interactive";;
        --debug )
            OPT=-g;;
        --gsl_dir=* )
            GSL_DIR="${i#*=}";;
        --print-builds )
            print_build_types
            exit 0;;
        --help | -h )
            echo "--prefix=[directory] --exec_prefix=[directory] : Executables are installed in $exec_prefix/bin. Default is /usr/local"
            echo "--bindir=[directory] : Executables are installed in ${bindir}. Default is /usr/local/bin"
            echo "--srcdir=[directory] : Source directory. Default is current directory (.)"
            echo "--enable-fisher-optimization : Approximates Fisher matrix by computing only the band elements."
            echo "--enable-fiducial-growth : Enables scaling derivative matrices with fiducial growth function."
            echo "--enable-mpi : Sets C++ compiler to mpic++"
            echo "--enable-openmp : Enables OpenMP"
            echo "--enable-tbb : Enables TBB"
            echo "--build=[build type] or [build type]: Sets the build type"
            # echo "--interactive : Use interactive mode."
            echo "--binz_fn=[TRIANGLE_Z_BINNING_FN or TOPHAT_Z_BINNING_FN] : Specify redshift binning function. Default is triangle."
            echo "--debug adds -g flag."
            echo "--gsl_dir=[directory] : GSL directory"
            echo "--print-builds : Prints out available build types"
            exit 0;;
        CXX=* )
            CXXu="${i#*=}";;
        --build=*|* )
            SYSTYPE="${i#*=}";;
    esac
    shift
done

MORECPPFLAGS="${binz_fn} ${en_mpi} ${fisher_opt} ${z_growth}"

OPENBLAS_DIR=/usr/local/opt/openblas
OPENBLAS_DIR_APPLE=/opt/homebrew/opt/openblas
CFITSIO_DIR_APPLE=/opt/homebrew/opt/cfitsio
FFTW_DIR_APPLE=/opt/homebrew/opt/fftw

case ${SYSTYPE} in
    nersc )
        CXX="CC"
        CXXu="CC"
        exec="srun -n 1 "
        set_omp_flags
        CPPFLAGS="${CPPFLAGS_OMP} ${gsl_inc} -I${CFITSIO_DIR}/include -I${FFTW_ROOT}/include"
        LDFLAGS="${gsl_lib} -L${CFITSIO_DIR}/lib -L${FFTW_ROOT}/lib"
        LDLIBS="-lfftw3 -lgsl ${LDLIBS_OMP} -lcfitsio"
        ;;
    nersc-mkl )
        CXX="CC -mkl"
        CXXu="CC -mkl"
        exec="srun -n 1 "
        set_omp_flags
        MORECPPFLAGS+="-DUSE_MKL_CBLAS"
        CPPFLAGS="${CPPFLAGS_OMP} ${gsl_inc} -I${CFITSIO_DIR}/include -I${FFTW_ROOT}/include"
        LDFLAGS="${gsl_lib} -L${CFITSIO_DIR}/lib -L${FFTW_ROOT}/lib"
        LDLIBS="-lfftw3 -lgsl ${LDLIBS_OMP} -lcfitsio"
        ;;
    GNU_XE18MKL|x64-linux-gnu-mklxe18 )
        CXX="g++"
        set_omp_flags
        MORECPPFLAGS+="-DUSE_MKL_CBLAS"
        CPPFLAGS="${CPPFLAGS_OMP} -m64 -I${MKLROOT}/include ${gsl_inc}"
        LDFLAGS="${gsl_lib} -L${MKLROOT}/lib/intel64 -Wl,--no-as-needed"
        LDLIBS="-lfftw3 -lgsl -lmkl_intel_lp64 ${MKL_THREAD_LIBS} ${LDLIBS_OMP} -lpthread -lm -ldl -lcfitsio"
        ;;
    XE18_icpcMKL|x64-linux-icpc-mklxe18 )
        CXX="icpc"
        set_omp_flags
        MORECPPFLAGS+="-DUSE_MKL_CBLAS"
        CPPFLAGS="${CPPFLAGS_OMP} -I${MKLROOT}/include ${gsl_inc}"
        LDFLAGS="-L${MKLROOT}/lib/intel64 ${gsl_lib}"
        LDLIBS="-lfftw3 -lgsl -lmkl_intel_lp64 ${MKL_THREAD_LIBS} ${LDLIBS_OMP} -lpthread -lm -ldl -lcfitsio"
        ;;
    x64-macos-clang-openblas )
        CXX="clang++"
        set_omp_flags
        CPPFLAGS="${CPPFLAGS_OMP} ${gsl_inc} -I${OPENBLAS_DIR}/include"
        LDFLAGS="${gsl_lib} -L${OPENBLAS_DIR}/lib"
        LDLIBS="-lfftw3 -lgsl -lopenblas ${LDLIBS_OMP} -lm -ldl -lcfitsio"
        ;;
    arm-macos-clang-openblas )
        CXX="clang++"
        set_omp_flags
        CPPFLAGS="${CPPFLAGS_OMP} ${gsl_inc} -I${CFITSIO_DIR_APPLE}/include -I${OPENBLAS_DIR_APPLE}/include -I${FFTW_DIR_APPLE}/include"
        LDFLAGS="${gsl_lib} -L${CFITSIO_DIR_APPLE}/lib -L${OPENBLAS_DIR_APPLE}/lib -L${FFTW_DIR_APPLE}/lib"
        LDLIBS="-lfftw3 -lgsl -lopenblas ${LDLIBS_OMP} -lm -ldl -lcfitsio"
        ;;
    x64-macos-gcc9-openblas )
        CXX="g++-9"
        set_omp_flags
        CPPFLAGS="${CPPFLAGS_OMP} ${gsl_inc} -I${OPENBLAS_DIR}/include"
        LDFLAGS="${gsl_lib} -L${OPENBLAS_DIR}/lib"
        LDLIBS="-lfftw3 -lgsl -lopenblas ${LDLIBS_OMP} -lm -ldl -lcfitsio"
        ;;
    x64-ubuntu-gcc-atlas )
        CXX="g++"
        set_omp_flags
        CPPFLAGS="${CPPFLAGS_OMP} ${gsl_inc}"
        LDFLAGS="${gsl_lib}"
        LDLIBS="-lfftw3 -lgsl -lcblas -llapacke -latlas -lm -ldl -lcfitsio"
        ;;
    x64-ubuntu-gcc-openblas )
        CXX="g++"
        set_omp_flags
        CPPFLAGS="${CPPFLAGS_OMP} ${gsl_inc}"
        LDFLAGS="${gsl_lib}"
        LDLIBS="-lfftw3 -lgsl -llapacke -lopenblas -lm -ldl -lcfitsio"
        ;;
    * )
        echo "Unknown system type ${SYSTYPE}."
        print_build_types
        exit 1
        ;;
esac

user_overwrite_defined_variables
save_makefile
echo "./configure ${CONFIGURE_ARGS}" > config.status


# Selects compiler
# Set up GSL directory
# Set up cblas library
# function interactive() {
#     echo "Using interactive mode...."
#     echo 'Specify your C++ compiler (g++, clang++, icpc):'
#     read CXX
#     case ${CXX} in
#         g++*|clang++|icpc )
#             ;;
#         * )
#             echo "ERROR: Compiler not supported!"
#             exit 1
#             ;;
#     esac

#     if [[ "${CXX}" = "icpc" ]]; then
#         echo "WARNING: Assuming Parallel Studio XE 2018."
#     fi
    
#     set_omp_flags
#     set_gsl_inc_lib

#     # CBLAS
#     echo 'Even though GSL has built in CBLAS functions, I recommended using an optimized library such as Intel MKL or ATLAS.'
#     echo 'Which library do you want to use (gsl, mkl, openblas, atlas)?'
#     read which_cblas_lib

#     case ${which_cblas_lib} in
#         gsl|GSL|Gsl )
#             LDFLAGS_CBLAS=""
#             LDLIBS_CBLAS="-lgslcblas"
#             ;;
#         atlas|ATLAS|Atlas )
#             if [[ -z "${ATLAS_DIR}" ]]; then
#                 echo "Where is ATLAS?"
#                 read CBLAS_DIR
#             else
#                 CBLAS_DIR="${ATLAS_DIR}"
#             fi
            
#             LDFLAGS_CBLAS="-L${CBLAS_DIR}/lib"
#             LDLIBS_CBLAS="-lcblas -latlas"
#             ;;
#         openblas|OpenBLAS|openBLAS )
#             echo "Where is OpenBLAS?"
#             read CBLAS_DIR
#             LDFLAGS_CBLAS="-L${CBLAS_DIR}/lib"
#             LDLIBS_CBLAS="-lopenblas" 
#             ;;
#         mkl|MKL|Mkl )
#             if [[ "${CXX}" = "icpc" ]]; then
#                 LDFLAGS_CBLAS=""
#                 LDLIBS_CBLAS="-lpthread"
#             elif [[ "${CXX}" = "g++" ]]; then
#                 if [[ -z "${MKLROOT}" ]]; then
#                     echo "ERROR: MKLROOT is not defined in environment!"
#                     exit 1
#                 fi

#                 CPPFLAGS_OMP+=" -m64"
#                 LDFLAGS_CBLAS="-L${MKLROOT}/lib/intel64 -Wl,--no-as-needed"
#                 LDLIBS_CBLAS="-lmkl_intel_lp64 ${LDLIBS_GCC_MKL} -lmkl_core -lpthread"
#             else
#                 echo 'Unknown combo'
#                 exit 1
#             fi
#             ;;
#         * )
#             echo 'Unknown library'
#             exit 1
#             ;;
#     esac

#     CPPFLAGS="${CPPFLAGS_OMP} ${gsl_inc}"
#     LDFLAGS="${gsl_lib} ${LDFLAGS_CBLAS}"
#     LDLIBS="-lgsl ${LDLIBS_CBLAS} ${LDLIBS_OMP} -lm -ldl"
# }

